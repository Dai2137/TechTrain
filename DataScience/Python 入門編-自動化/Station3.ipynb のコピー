{"cells":[{"cell_type":"markdown","metadata":{"id":"UbQKVmaRqQWH"},"source":["| Version | Published Date| Details |\n","| -- | -- | -- |\n","| ver.1.0.0 | 2023/8/29 | 初版 |\n","| ver.1.0.1 | 2024/5/14 | 誤記修正 |"]},{"cell_type":"markdown","metadata":{"id":"i6WLVVnRRmim"},"source":["# 正規表現を使いこなそう\n","\n","Station3では，これまでのStationで学んだ正規表現を本格的に使いこなします。しばらくは覚えるばかりで「これがいったいなんの役に立つのか」と思った方もいることでしょう。このStationでは，より多彩な正規表現を学びます。このStationが終わる頃には電話番号やメールアドレスの抽出といった，より実務的なタスクをこなすことを目指します。"]},{"cell_type":"markdown","metadata":{"id":"7s97_nUZSik8"},"source":["## 文字集合\n","\n","前回のStationでは `\\d` が数字を意味することを学びました。つまり `\\d` は `0|1|2|3|4|5|6|7|8|9` の短縮形です。\n","\n","|  短縮形  |  意味  |\n","| ---- | ---- |\n","| \\d |0-9の数字|\n","| \\D | 0-9の数字以外 |\n","| \\w | 文字，数字，下線 (単語wordのw) |\n","| \\W | 文字，数字，下線 **以外** |\n","| \\s | スペース，タブ，改行 (空白spaceのs) |\n","| \\S | スペース，タブ，改行 **以外** |\n","\n","`\\d` は数字に， `\\w` は数字，文字，下線にそれぞれマッチしますが，文字だけにマッチする短縮形がないことに注意しましょう。文字だけにマッチさせるには後述の文字集合 `[a-zA-Z]` を使います。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWX9e9TRWrtx"},"outputs":[],"source":["import re"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bDao9RppWkfH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724306680095,"user_tz":-540,"elapsed":438,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"0fdfc8d6-5fea-4f68-bc36-e8b29c03a78b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['1 rat',\n"," '2 ox',\n"," '3 tiger',\n"," '4 rabbit',\n"," '5 dragon',\n"," '6 snake',\n"," '7 horse',\n"," '8 sheep',\n"," '9 monkey',\n"," '10 rooster',\n"," '11 dog',\n"," '12 pig']"]},"metadata":{},"execution_count":2}],"source":["zodiac_animals = re.compile(r'\\d+\\s\\w+')\n","zodiac_animals.findall('1 rat, 2 ox, 3 tiger, 4 rabbit, 5 dragon, 6 snake, 7 horse, 8 sheep, 9 monkey, 10 rooster, 11 dog, 12 pig')"]},{"cell_type":"markdown","metadata":{"id":"__96x4DfYqJz"},"source":["`\\d+\\s\\w+` は，1つ以上の数字 `\\d+` の次に、空白文字が1つ `\\s` あり，1つ以上の文字または数字または下線 `\\w+` が続く文字列にマッチします。`findall()` メソッドは，この正規表現パターンにマッチした文字列をリストとして返します。"]},{"cell_type":"markdown","metadata":{"id":"FL844vzRZSHN"},"source":["## 独自の文字集合を定義する\n","\n","`\\d` や `\\w` や `\\s` のような短縮形では集合が大きすぎる場合 `[]` を使って独自の文字集合を定義できます。たとえば `[aiueoAIUEO]` は大文字と小文字の母音にマッチします。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uLvEZcmKWqIm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724306753226,"user_tz":-540,"elapsed":561,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"e5656758-3e06-4b27-9493-c0da2e5a172f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['a', 'a', 'a', 'o', 'a', 'a']"]},"metadata":{},"execution_count":3}],"source":["vowel_regex = re.compile(r'[aiueoAIUEO]')\n","vowel_regex.findall('Baby shark and Momma shark')"]},{"cell_type":"markdown","metadata":{"id":"xSyYV0WnrEno"},"source":["また `-` を使って文字や数字の範囲を指定できます。たとえば `[0-5]` という文字集合は `0-5` の数字にだけマッチします。 `0|1|2|3|4|5` と書くよりもはるかに短く書けますね。 `[a-zA-Z0-9]` という文字集合は 小文字，大文字，数字 にマッチします。\n","\n","`[]` 内では，通常の正規表現の記号は解釈されないことに注意しましょう。つまり `.` `*` `?` `()` に `\\` をつける必要はありません。たとえば `[0-5.]` は 0-5 の数字とピリオドにマッチします。 `[0-5\\.]` のように書く必要はありません。\n","\n","`[` の直後に `^` をつけると，文字の **補集合** になります。補集合とは，定義した文字集合以外とマッチする，ということを示します。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LJ4871rFqqZx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309449689,"user_tz":-540,"elapsed":436,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"8a15f62b-6559-4972-a532-83e11c6be9fd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['B',\n"," 'b',\n"," 'y',\n"," ' ',\n"," 's',\n"," 'h',\n"," 'r',\n"," 'k',\n"," ' ',\n"," 'n',\n"," 'd',\n"," ' ',\n"," 'M',\n"," 'm',\n"," 'm',\n"," ' ',\n"," 's',\n"," 'h',\n"," 'r',\n"," 'k']"]},"metadata":{},"execution_count":4}],"source":["consonant_regex = re.compile(r'[^aiueoAIUEO]')\n","consonant_regex.findall('Baby shark and Momma shark')"]},{"cell_type":"markdown","metadata":{"id":"wCmwehoUvWCV"},"source":["日本語の文字にマッチする正規表現は以下のように書きます。\n","\n","| 文字種 | 正規表現           |\n","|--------|--------------------|\n","| 全角英字 | `[A-Za-z]`           |\n","| 全角数字 | `[0-9]`              |\n","| 漢数字  | `[ 〇一二三四五六七八九 ]` |\n","| ひらがな | `[\\u3040-\\u309F]`     |\n","| カタカナ | `[\\u30A0-\\u30FF]`     |\n","| 半角カタカナ | `[\\uFF66-\\uFF9F]`  |\n","| 漢字   | `[\\u4E00-\\u9fff]`    |"]},{"cell_type":"markdown","metadata":{"id":"ikyY4orCw2Qc"},"source":["## `^` と `$` 記号\n","\n","`^` には別の使い方もあり，検索対象の文字列の先頭にマッチすることを指定するときにも使います。同様に `$` は文字列の末尾にマッチします。 `^` と `$` を同時に使うと，文字列全体が正規表現とマッチすることを表します。つまり，文字列の一部がマッチするものは扱わなくなります。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ujZywB72vAA_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309710477,"user_tz":-540,"elapsed":415,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"60a23cd5-4ac1-49d2-e621-3e8115cbd138"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<re.Match object; span=(0, 5), match='Hello'>"]},"metadata":{},"execution_count":5}],"source":["begins_with_hello = re.compile(r'^Hello')\n","begins_with_hello.search('Hello, world!')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xJ85H6iMxLsP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309713411,"user_tz":-540,"elapsed":5,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"95bdac74-0446-4882-db54-3afef85f5dda"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":6}],"source":["begins_with_hello.search('He said hello.') == None"]},{"cell_type":"markdown","metadata":{"id":"naJCEUAvxP5F"},"source":["また `\\d$` という正規表現は `0-9` の数字で終わる文字列にマッチします。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Eh27WNQCxOEx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309866792,"user_tz":-540,"elapsed":687,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"ef343c8a-2abd-44da-8163-323802bb70ba"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<re.Match object; span=(17, 18), match='5'>"]},"metadata":{},"execution_count":7}],"source":["ends_with_number = re.compile(r'\\d$')\n","ends_with_number.search('Your number is 765')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CYxFJ7PMxbci","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309867267,"user_tz":-540,"elapsed":9,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"e72e5bcc-bb2a-4788-d876-c6bd4a316211"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":8}],"source":["ends_with_number.search('Your number is seven hundred sixty-five.') == None"]},{"cell_type":"markdown","metadata":{"id":"9N12gN6bxrNz"},"source":["`^\\d+$` という正規表現は，全体が1文字以上の数字である文字列とマッチします。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1gpOyOauxiIQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309920376,"user_tz":-540,"elapsed":394,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"b07af592-2552-4496-f149-9887e8189507"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<re.Match object; span=(0, 10), match='9876543210'>"]},"metadata":{},"execution_count":9}],"source":["whole_string_is_num = re.compile(r'^\\d+$')\n","whole_string_is_num.search('9876543210')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Y1WJK06xzaZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309920806,"user_tz":-540,"elapsed":13,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"5a7c8c7a-dc47-4265-c8ed-1b0a0bde0e6b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":10}],"source":["whole_string_is_num.search('12345aahbksh67890') == None"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SC6bF2tVx2ZI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724309920807,"user_tz":-540,"elapsed":12,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"954e5d44-bb48-4167-bce5-df43540bf215"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":11}],"source":["whole_string_is_num.search('765 283315') == None"]},{"cell_type":"markdown","metadata":{"id":"JGEfUjunySar"},"source":["## ワイルドカード文字\n","\n","正規表現では `.` は **ワイルドカード** と呼ばれ，改行以外の任意の文字とマッチします。たとえば"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LZXKLFTnx7bg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724310032379,"user_tz":-540,"elapsed":406,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"0023ef6f-4f09-4d4d-b9f3-320f70222868"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Mat', 'sat', ' at', 'lat', 'mat', 'hat', 'fat', 'cat']"]},"metadata":{},"execution_count":12}],"source":["at_regex = re.compile(r'.at')\n","at_regex.findall('Matt sat at the flat mat and chatted with his fat cat.')"]},{"cell_type":"markdown","metadata":{"id":"-ejhsoPMzJAL"},"source":["`.` は1文字としかマッチしないため，この例の `flat` に対しては `lat` だけがマッチします。 `.` そのものとマッチさせたい場合は `\\` を使って `\\.` とエスケープします。"]},{"cell_type":"markdown","metadata":{"id":"cCwbUJ0JzaFu"},"source":["### `.` と `*` であらゆる文字とマッチする\n","\n","あらゆる文字列でもマッチしたいことがあります。たとえば `名前:` にマッチしたあとに続く文字列や `名字:` にマッチしたあとに続く文字列です。このように「なんでも」にマッチさせるための正規表現は `.*` と書きます。 `.` は「改行以外の任意の1文字」であり `*` は「直前のパターンの0回以上の繰り返し」を意味するのでした。\n","\n","これらを組み合わせて任意の長さの文字列を表現します。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8Zq9RXvOyeYu","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310156349,"user_tz":-540,"elapsed":447,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"0467f4be-b84e-49f4-f02d-ac4109c12228"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'炭治郎'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":13}],"source":["name_regex = re.compile(r'名: (.*) 姓: (.*)')\n","mo = name_regex.search('名: 炭治郎 姓: 竈門')\n","mo.group(1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qLfb8ncR2wEG","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310162388,"user_tz":-540,"elapsed":401,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"0f601f36-d9db-43e6-e376-54050db0b7bc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'竈門'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":14}],"source":["mo.group(2)"]},{"cell_type":"markdown","metadata":{"id":"BBlWKNFv23gq"},"source":["`.*` は貪欲モードを採用し，できるだけ長い文字列とマッチします。非貪欲モードにしたいときは `.*?` と疑問符を付けます。`{}` の場合と同様に，疑問符は非貪欲モードにすることを意味します。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dNiUjNlA2z9g","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310177326,"user_tz":-540,"elapsed":643,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"9d704b68-5fbd-4819-dd85-b9dfd0dc98e9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'<To serve man>'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":15}],"source":["nongreedy_regex = re.compile(r'<.*?>') # 非貪欲\n","mo = nongreedy_regex.search('<To serve man> for lunch.>')\n","mo.group()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"51XWeyq33HbA","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310177919,"user_tz":-540,"elapsed":7,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"d81ae69b-f5c2-4b98-bab8-61861bcb1929"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'<To serve man> for lunch.>'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":16}],"source":["greedy_regex = re.compile(r'<.*>') # 貪欲\n","mo = greedy_regex.search('<To serve man> for lunch.>')\n","mo.group()"]},{"cell_type":"markdown","metadata":{"id":"hWO_D1_j3UZZ"},"source":["この正規表現はどちらも「 `<` ではじまり，任意の文字列が続き `>` で終わる」ことを示しています。しかし `<To serve man> for lunch.>` という文字列に対しては `>` とマッチするパターンが2通りあります。非貪欲モードではできるだけ短い文字列とマッチし，貪欲モードではできるだけ長い文字列とマッチします。"]},{"cell_type":"markdown","metadata":{"id":"G0-EkQ5i7MZb"},"source":["### `.` を改行とマッチさせる\n","\n","`.*` は改行以外のあらゆる文字列とマッチします。 `re.compile()` の第2引数として `re.DOTALL` を渡すと，ドット文字が改行を含むすべての文字とマッチするようになります。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NkOglJp93SXv","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310457055,"user_tz":-540,"elapsed":548,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"82fb939a-3210-41ac-9298-e865f6c8e90e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"God's in his heaven \""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":17}],"source":["no_newline_regex = re.compile('.*')\n","no_newline_regex.search(\n","    \"God's in his heaven \\n\"\n","    \"All's right with the world!\\n\"\n",").group()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"omc1XitP7tna","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310457450,"user_tz":-540,"elapsed":12,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"1ce345c3-6237-4bab-dc84-48db292609df"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"God's in his heaven \\nAll's right with the world!\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":18}],"source":["newline_regex = re.compile('.*', re.DOTALL)\n","newline_regex.search(\n","    \"God's in his heaven \\n\"\n","    \"All's right with the world!\\n\"\n",").group()"]},{"cell_type":"markdown","metadata":{"id":"NddzfJae8GFZ"},"source":["`no_newline_regex` では `re.DOTALL` オプションが渡されていなかったため，最初の改行文字の前までの部分にマッチしました。一方 `newline_regex` は `re.DOTALL` オプションを使って生成したため，改行文字も含めて文字列全体にマッチしたことがわかります。"]},{"cell_type":"markdown","metadata":{"id":"kvIyAJkqHvwj"},"source":["## 正規表現に用いる記号のまとめ\n","\n","ここまでたくさんの記法を説明してきました。ここで簡単に基本的な正規表現をまとめます。\n","\n","- `?`は，直前のグループの0回か1回の出現にマッチする\n","- `*`は，直前のグループの0回以上の出現にマッチする\n","- `+`は，直前のグループの1回以上の出現にマッチする\n","- `{n}`は，直前のグループのn回の出現にマッチする\n","- `{n,}`は，直前のグループのn回以上の出現にマッチする\n","- `{,m}`は，直前のグループの0~m回の出現にマッチする\n","- `{n,m}`は，直前のグループのn~m回の出現にマッチする\n","- `{n,m}?`，`*?`，`+?`は，直前のグループの非貪欲マッチを行う\n","- `^spam`は，「spam」から始まる文字列とマッチする\n","- `spam$`は，「spam」で終わる文字列とマッチする\n","- `.`は，改行文字以外の任意の1文字とマッチする\n","- `\\d`，`\\w`，`\\s`は，それぞれ，数字，単語を構成する文字，空白文字にマッチする\n","- `\\D`，`\\W`，`\\S`は，それぞれ，数字，単語を構成する文字，空白文字以外の文字にマッチする\n","- `[abc]`は，角カッコの中の任意の1文字にマッチする（この例では、「a」か「b」か「c」）\n","- `[^abc]`は，角カッコの中の文字以外の任意の1文字にマッチする"]},{"cell_type":"markdown","metadata":{"id":"cdImIQuhIxpa"},"source":["## 大文字・小文字を無視したマッチ\n","\n","通常は，正規表現は大文字と小文字を区別してマッチします。例えば次の正規表現はそれぞれまったく異なる文字列とマッチします。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cGQPx42T8CeH"},"outputs":[],"source":["regex1 = re.compile('Ruby')\n","regex2 = re.compile('ruby')\n","regex3 = re.compile('rUby')\n","regex4 = re.compile('RUBY')"]},{"cell_type":"markdown","metadata":{"id":"SqyzNO9wJg2I"},"source":["大文字と小文字を区別せずにマッチしたいときがあります。そうするには `re.compile()` に `re.IGNORECASE` もしくは `re.I` オプションを渡します。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wXyzSFnLG8TX","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310726100,"user_tz":-540,"elapsed":581,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"f5894dee-ee61-4f92-8284-e541e5bb4ddd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Ruby'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":20}],"source":["ruby = re.compile(r'ruby', re.I)\n","ruby.search('Ruby is an interpreted, high-level, general-purpose programming language').group()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2GE6yIzWLd9M","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310731798,"user_tz":-540,"elapsed":455,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"370271ad-82ff-411a-842a-c41c397eb4c1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'RUBY'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":21}],"source":["ruby.search('RUBY is an interpreted, high-level, general-purpose programming language').group()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KjCdlEGrLoQ-","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310732203,"user_tz":-540,"elapsed":9,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"c5b4d96b-88d4-43b3-dcf4-cf6f71ff541f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'ruby'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":22}],"source":["ruby.search('ruby is an interpreted, high-level, general-purpose programming language').group()"]},{"cell_type":"markdown","metadata":{"id":"8rZ4RFBLNIeK"},"source":["## `sub()` メソッドを用いて文字列を置換する\n","\n","正規表現は文字列のパターン検索だけではなく，文字列の置換もすることもできます。 `Regex` オブジェクトの `sub()` メソッドは引数を2つ取ります。第1引数は置き換える文字列，第2引数は検索置換対象の文字列です。 `sub()` メソッドは置換後の文字列を返します。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YXt6-vwxNFoH","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310799956,"user_tz":-540,"elapsed":399,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"1712fdac-aa06-4a45-f74c-f842d38a857f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'***CENSORED*** gave the secret documents to ***CENSORED***'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":23}],"source":["names_regex = re.compile(r'Agent \\w+')\n","names_regex.sub('***CENSORED***', \"Agent Matt gave the secret documents to Agent Mary\")"]},{"cell_type":"markdown","metadata":{"id":"Xn9aqd5iOtHl"},"source":["マッチした文字列を，置換の一部として使いたい場合もあります。その場合は `sub()` の第1引数に `\\1` `\\2` `\\3` のように，グループの番号を使って記述します。\n","\n","たとえば，個人情報を含む名前を検索し，頭文字だけで表示するとしましょう。そうするには `(\\w)\\w*` という正規表現を用いて `sub()` の第1引数に `\\1****` を渡します。`\\1` がグループ1にマッチした文字列であり，今回の場合は正規表現の `(\\w)` に置き換わります。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tpTbArwNOmaz","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724310801136,"user_tz":-540,"elapsed":6,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"b50d7259-aa0f-4e84-ebf1-d40178705cfb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'A**** told C**** that E**** knew B**** was a double agent'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":24}],"source":["agent_names_regex = re.compile(r'Agent (\\w)\\w*')\n","agent_names_regex.sub(r'\\1****', \"Agent Anderson told Agent Campbell that Agent Edwards knew Agent Bennett was a double agent\")"]},{"cell_type":"markdown","metadata":{"id":"HgFavzKmVcx3"},"source":["## 複雑な正規表現を管理する\n","\n","正規表現は，テキストのパターンが単純なうちはよいのですが，複雑になってくると長くてややこしい記述が必要になります。この場合は，正規表現の文字列の中に含まれる空白文字やコメントを無視するように `re.compile()` に指定すればこの問題を緩和できます。この **冗長モード** を指定するには `re.compile()` に `re.VERBOSE` を渡します。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XZasCU5lUWBw"},"outputs":[],"source":[" phone_regex = re.compile(r'((\\d{3}|\\(\\d{3}\\))?(\\s|-|\\.)?\\d{3}(\\s|-|\\.)'\n","                             r'\\d{4}(\\s*(ext|x|ext.)\\s*\\d{2,5})?)')"]},{"cell_type":"markdown","metadata":{"id":"wqNnF2AxXB6C"},"source":["のような難解な1行の正規表現を"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1GxLt3KdXIuk"},"outputs":[],"source":["phone_regex = re.compile(r\"\"\"(\n","    (\\d{3}|\\(\\d{3}\\))?              # 3桁の市外局番(()が付いていてもよい)\n","    (\\s|-|\\.)?                      # 区切り(スペースかハイフンかドット)\n","    \\d{3}                           # 3桁の市内局番\n","    (\\s|-|\\.)                       # 区切り\n","    \\d{4}                           # 4桁の番号\n","    (\\s*(ext|x|ext.)\\s*\\d{2,5})?    # 2~5桁の内線番号\n","    )\"\"\", re.VERBOSE)"]},{"cell_type":"markdown","metadata":{"id":"nwo8Qj7gXyQt"},"source":["のようにも書けます。正規表現の文字列中のコメントの書き方はPythonのコードと同じです。このように書いた場合は文字列中の余分な空白もマッチする文字列には含まれなくなります。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZbKc6twyX7u_","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724311113077,"user_tz":-540,"elapsed":414,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"7649b536-645a-49f2-fb46-37315baba702"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nThis is\\nvery looooooooooooong\\nsentence\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}],"source":["text = \"\"\"\n","This is\n","very looooooooooooong\n","sentence\n","\"\"\"\n","text"]},{"cell_type":"markdown","metadata":{"id":"6rxN4x4WX4aO"},"source":["行数の多いテキストをPythonで書く場合，このように `\"\"\"` と `\"\"\"` で囲むと複数行に渡って可読性を高めながらテキストを書けることは覚えておくとよいでしょう。改行を取り除きたい場合は `replace()` メソッドを使うと便利です。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7mXbUZQ5X5xs","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724311114354,"user_tz":-540,"elapsed":9,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"8bcf3fd3-0b10-4a31-d635-76e0b0b9c27e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'This isvery looooooooooooongsentence'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":29}],"source":["text.replace(\"\\n\", \"\")"]},{"cell_type":"markdown","metadata":{"id":"miNJcZprfUfh"},"source":["# 電話番号とメールアドレスを抽出\n","\n","自動化のStationでは，今までのStationとは違い，より実務的なプロジェクトに取り組みます。ここで大量のウェブページや文書から，すべての電話番号とメールアドレスを見つけ出すことを考えます。\n","\n","手作業でページをスクロールして探し出すのはとても長い時間がかかることでしょう。しかしColabに貼り付けたテキストから電話番号とメールアドレスを検索してくれるプログラムがあれば `Ctrl + A` で全テキストを選択，`Ctrl + C` でコピー、`Ctrl + V` でColabに貼り付け，プログラムを実行するだけで済みます。(Windowsのキーボードショートカットです。Macの場合は `Command` キーを使います。)\n","\n","こういった少し重たい自動化処理をPythonで行う場合，すぐにコードを書きたくなる方もいることでしょう。しかしいきなり取りかかるのではなく，まずは全体を構想した方が，多くの場合より楽に速く問題を解くことができます。\n","\n","たとえば，電話番号とメールアドレスを抽出するためには，次のような機能が必要です。\n","\n","1. 貼り付けられたテキストを読み込む\n","2. テキストから電話番号とメールアドレスを見つける\n","3. 見つけたパターンを表示する\n","\n","次にこれをコードで実現する方法を考えます。コードは次のようなことをする必要があります。\n","\n","1. 電話番号用とメールアドレス用の2つの正規表現を作る\n","2. 2つの正規表現にマッチするすべての文字列を取得する\n","3. マッチした文字列をきれいに整形して表示する\n","4. 何も見つからなかったときにメッセージを表示する\n","\n","このようなロードマップを作ると，それぞれの問題に集中して取り組めます。少しむずかしく感じるかもしれませんが，今まで学んだことを使えば実現できます。"]},{"cell_type":"markdown","metadata":{"id":"OmSHV7k4zOZU"},"source":["## 電話番号の抽出\n","\n","日本の電話番号は，市外局番が0からはじまる1-4桁，市内局番が1-4桁，加入者番号が4桁であり，正規表現は次のようになります。市外局番は数字かそれぞれが丸カッコで囲まれたもののどちらかであるため `|` で区切って記述しています。それぞれが何とマッチするのかを忘れないようにコメントをつけています。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kwNcuZK6g_m2"},"outputs":[],"source":["phone_regex = re.compile(r\"\"\"(\n","    (0\\d{0,3}|\\(0\\d{0,3}\\))         # 市外局番\n","    (\\s|-)                          # 区切り\n","    (\\d{1,4})                       # 市内局番\n","    (\\s|-)                          # 区切り\n","    (\\d{3,4})                       # 加入者番号\n","    (\\s*(ext|x|ext.)\\s*(\\d{2,5}))?  # 内線番号\n","    )\"\"\", re.VERBOSE)"]},{"cell_type":"markdown","metadata":{"id":"Pc3ivq401KNj"},"source":["## メールアドレスの抽出\n","\n","同様に，メールアドレスの正規表現をつくります。プログラムは次のようになるでしょう。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a6No9FFO1hPT"},"outputs":[],"source":["email_regex = re.compile(r\"\"\"(\n","    [a-zA-Z0-9._%+-]+   # ユーザー名\n","    @                   # @記号\n","    [a-zA-Z0-9.-]+      # ドメイン名\n","    (\\.[a-zA-Z]{2,4})   # ドットの後\n",")\"\"\", re.VERBOSE)"]},{"cell_type":"markdown","metadata":{"id":"q-0ae35U1z3A"},"source":["メールアドレスのユーザー名の部分は，小文字，大文字，数字，ドット，下線，パーセント，プラス，ハイフンから1文字以上使って構成されます。これらは文字集合 `[a-zA-Z0-9._%+-]` として表わせ，1つ以上あるので `+` をつけます。\n","\n","ユーザー名とドメイン名は `@` で区切ります。ドメイン名に使える文字は少し限定されていて，アルファベット，数字，ドット，ハイフンだけなので `[a-zA-Z]` とします。最後に「ドットの後」の部分 (技術的にはトップレベルドメインといいます) は，文字通り「ドットの後」としここでは2-4文字とします。\n","\n","実際にはメールアドレスの形式にはより複雑なルールがあります。ここで書いた正規表現があらゆる正しいメールアドレスにマッチするものではありませんが，よくあるメールアドレスの大部分にはマッチするでしょう。"]},{"cell_type":"markdown","metadata":{"id":"CsCwqGi_4m_-"},"source":["## セル内のテキストを検索する\n","\n","電話番号とメールアドレスそれぞれのための正規表現を準備できました。それではPythonの `re` にはついにColabのセルに書かれたテキストを検索してもらいましょう。ここでは以前に学んだ `findall()` メソッドを使います。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iAQS2M7B2l6K"},"outputs":[],"source":["text = \"\"\"\n","お問い合わせありがとうございます。\n","\n","ご不明点やご質問がございましたら、お気軽にお知らせください。\n","\n","お問い合わせ先の連絡先情報は以下の通りです：\n","\n","電話番号：\n","\n","本社：(0120)-1234-5678\n","支店1：03-9876-5432\n","支店2：052-2468-1357\n","メールアドレス：\n","\n","一般お問い合わせ：info@example.com\n","カスタマーサポート：support@example.com\n","営業部門：sales@example.com\n","鈴木：suzuki.taro@example.cs.com\n","お手数ですが、お問い合わせの際は、以下の情報をお知らせください：\n","\n","お名前：\n","ご連絡先（電話番号またはメールアドレス）：\n","お問い合わせ内容：\n","\n","ご連絡いただいた内容に対し、迅速に対応させていただきます。\n","どうぞよろしくお願いいたします。\n","\"\"\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GEC-zWob486-"},"outputs":[],"source":["matches = []\n","\n","for groups in phone_regex.findall(text):\n","    phone_num = '-'.join([groups[1], groups[3], groups[5]])\n","    if groups[8] != '':\n","        phone_num += ' x' + groups[8]\n","    matches.append(phone_num)\n","\n","for groups in email_regex.findall(text):\n","    matches.append(groups[0])"]},{"cell_type":"markdown","metadata":{"id":"D3TIphC57ab6"},"source":["正規表現がマッチするたびに1つのタプルが作られ，正規表現のグループに対応する文字列が格納されています。 `groups[0]` は正規表現全体を表すため，タプルの先頭要素は検索したい対象そのものとなります。\n","\n","検索結果は定義した `matches` リストに記録していきます。最初は空リスト `[]` として `for` ループを2回回します。まずメールアドレスを調べ，そのあとに電話番号を調べます。メールアドレスは `groups[0]` を使って単にマッチした文字列の全体を追加しています。一方で電話番号は単純に追加することはしません。この正規表現はさまざまな形式の電話番号を見つけ出しますが，追加するのはひとつの標準フォーマットにしておいた方が便利です。そのため `phone_num` 変数には `groups[1], groups[3], groups[5], groups[8]` にマッチした文字列から構成した文字列を格納します。それぞれ市外局番，3桁の番号，4桁の番号，内線番号に相当します。グループ番号は，グループの開きカッコが出てくる順に数えます。"]},{"cell_type":"markdown","metadata":{"id":"qKORR3DI8646"},"source":["## 検索結果をひとまとめにする\n","\n","以上で `matches` に文字列のリストとして電話番号とメールアドレスを取得できました。今度はこれを見やすく表示してみます。ここではPythonのリストが `[]` である場合は `False` そうでなければ `True` を返すことを利用しています。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZpUnpz6w7JKB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724312152076,"user_tz":-540,"elapsed":601,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"a7691311-1e78-40f3-a368-cec7b7e08520"},"outputs":[{"output_type":"stream","name":"stdout","text":["見つかった電話番号とメールアドレスはこちらです: \n","(0120)-1234-5678\n","03-9876-5432\n","052-2468-1357\n","info@example.com\n","support@example.com\n","sales@example.com\n","suzuki.taro@example.cs.com\n"]}],"source":["if matches:\n","    matched_text = \"\\n\".join(matches)\n","    print(\"見つかった電話番号とメールアドレスはこちらです: \")\n","    print(matched_text)\n","else:\n","    print(\"電話番号とメールアドレスは見つかりませんでした\")"]},{"cell_type":"markdown","metadata":{"id":"9SJhMn1q_uqj"},"source":["# 確認テスト\n","\n","個人情報が含まれたcsvファイルである `personal_info` を使って以下の問いに答えてください。このファイルに含まれる個人情報はすべてダミーであり，プログラムによって生成したものです。テストの回答はそれぞれ以下の質問の答えを数字で入力してください。プログラムのソースコードを入力する必要はありません。\n","\n","1. 携帯電話番号の下2桁が `11` である人の人数を答えてください。\n","1. 早生まれの人数を答えてください。早生まれとは，生まれた月が1月から3月の人を指します。\n","1. 東京23区に住む人数を答えてください。東京23区の住所は必ず「東京都○○区」と表されることに注意してください。例: 東京都渋谷区，東京都北区"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e-zz0aW2ARke","colab":{"base_uri":"https://localhost:8080/","height":615},"executionInfo":{"status":"ok","timestamp":1724312845170,"user_tz":-540,"elapsed":3630,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"7f937190-3845-465e-8c09-ae8e7c39ec72"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         氏名   氏名（ひらがな）  年齢         生年月日      性別 血液型  \\\n","0     野田 大知     のだ だいち  67  1955年12月23日       男   A   \n","1     金田 英俊   かねだ ひでとし  56  1966年05月20日       男   O   \n","2     稲村 政昭  いなむら まさあき  62  1960年11月19日       男   A   \n","3     中島 一弘  なかじま かずひろ  37  1986年02月01日  その他・不明   A   \n","4     大塚 愛美   おおつか めぐみ  62  1961年02月13日       女   B   \n","..      ...        ...  ..          ...     ...  ..   \n","195   古川 聡太   ふるかわ そうた  35  1987年12月22日       男   B   \n","196  宇佐美 紘子    うさみ ひろこ  21  2002年02月17日       女   B   \n","197   吉池 博子   よしいけ ひろこ  27  1995年08月28日       女   O   \n","198  坂本 亜紀子   さかもと あきこ  42  1980年12月13日       女   A   \n","199   山口 千尋   やまぐち ちひろ  29  1993年09月09日       女   A   \n","\n","                           メールアドレス          電話番号         携帯電話番号      郵便番号  \\\n","0           nodadaichi@example.com  0964-63-4407  080-8537-4965  867-2838   \n","1      kanedahidetoshi@example.org  0846-39-1554  080-3826-9491  730-7952   \n","2       inamuramasaaki@example.net  06-6819-4382  080-4393-4681  577-6363   \n","3    nakajima_kazuhiro@example.com  03-8838-4950  080-2420-0588  119-6946   \n","4      otsuka_megumi@example.ne.jp  01587-7-2293  050-8744-2152  079-4718   \n","..                             ...           ...            ...       ...   \n","195       furukawasota@example.com  0267-77-2518  090-1424-3975  392-9646   \n","196        hirokousami@example.com  0494-05-3136  080-6575-1815  347-1039   \n","197    yoshiike_hiroko@example.com  03-0362-8237  070-3530-6019  202-5618   \n","198     sakamoto1213@example.ne.jp  0564-53-7373  080-8975-8091  445-2380   \n","199      yamaguchi99@example.co.jp  098-040-1206  070-5670-2041  903-9529   \n","\n","                       住所          会社名  \n","0        熊本県熊本市西区春日2-4-10          NaN  \n","1         広島県福山市川口町1-2-12  合名会社染谷農機工作所  \n","2      大阪府大阪市住之江区南港中4-2-4          NaN  \n","3          東京都渋谷区広尾2-5-15       合資会社橘屋  \n","4      北海道沙流郡日高町富川南3-2-18          NaN  \n","..                    ...          ...  \n","195         長野県松本市中央1-2-3    株式会社ケンテック  \n","196   埼玉県南埼玉郡宮代町川端2-4-202      有限会社ツカサ  \n","197       東京都渋谷区恵比寿1-1-18          NaN  \n","198  愛知県名古屋市西区上名古屋3-3-903     株式会社HERO  \n","199     沖縄県那覇市おもろまち1-1-22          NaN  \n","\n","[200 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-85c3a764-fb19-4320-98a9-dddbc342bc93\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>氏名</th>\n","      <th>氏名（ひらがな）</th>\n","      <th>年齢</th>\n","      <th>生年月日</th>\n","      <th>性別</th>\n","      <th>血液型</th>\n","      <th>メールアドレス</th>\n","      <th>電話番号</th>\n","      <th>携帯電話番号</th>\n","      <th>郵便番号</th>\n","      <th>住所</th>\n","      <th>会社名</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>野田 大知</td>\n","      <td>のだ だいち</td>\n","      <td>67</td>\n","      <td>1955年12月23日</td>\n","      <td>男</td>\n","      <td>A</td>\n","      <td>nodadaichi@example.com</td>\n","      <td>0964-63-4407</td>\n","      <td>080-8537-4965</td>\n","      <td>867-2838</td>\n","      <td>熊本県熊本市西区春日2-4-10</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>金田 英俊</td>\n","      <td>かねだ ひでとし</td>\n","      <td>56</td>\n","      <td>1966年05月20日</td>\n","      <td>男</td>\n","      <td>O</td>\n","      <td>kanedahidetoshi@example.org</td>\n","      <td>0846-39-1554</td>\n","      <td>080-3826-9491</td>\n","      <td>730-7952</td>\n","      <td>広島県福山市川口町1-2-12</td>\n","      <td>合名会社染谷農機工作所</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>稲村 政昭</td>\n","      <td>いなむら まさあき</td>\n","      <td>62</td>\n","      <td>1960年11月19日</td>\n","      <td>男</td>\n","      <td>A</td>\n","      <td>inamuramasaaki@example.net</td>\n","      <td>06-6819-4382</td>\n","      <td>080-4393-4681</td>\n","      <td>577-6363</td>\n","      <td>大阪府大阪市住之江区南港中4-2-4</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>中島 一弘</td>\n","      <td>なかじま かずひろ</td>\n","      <td>37</td>\n","      <td>1986年02月01日</td>\n","      <td>その他・不明</td>\n","      <td>A</td>\n","      <td>nakajima_kazuhiro@example.com</td>\n","      <td>03-8838-4950</td>\n","      <td>080-2420-0588</td>\n","      <td>119-6946</td>\n","      <td>東京都渋谷区広尾2-5-15</td>\n","      <td>合資会社橘屋</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>大塚 愛美</td>\n","      <td>おおつか めぐみ</td>\n","      <td>62</td>\n","      <td>1961年02月13日</td>\n","      <td>女</td>\n","      <td>B</td>\n","      <td>otsuka_megumi@example.ne.jp</td>\n","      <td>01587-7-2293</td>\n","      <td>050-8744-2152</td>\n","      <td>079-4718</td>\n","      <td>北海道沙流郡日高町富川南3-2-18</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>古川 聡太</td>\n","      <td>ふるかわ そうた</td>\n","      <td>35</td>\n","      <td>1987年12月22日</td>\n","      <td>男</td>\n","      <td>B</td>\n","      <td>furukawasota@example.com</td>\n","      <td>0267-77-2518</td>\n","      <td>090-1424-3975</td>\n","      <td>392-9646</td>\n","      <td>長野県松本市中央1-2-3</td>\n","      <td>株式会社ケンテック</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>宇佐美 紘子</td>\n","      <td>うさみ ひろこ</td>\n","      <td>21</td>\n","      <td>2002年02月17日</td>\n","      <td>女</td>\n","      <td>B</td>\n","      <td>hirokousami@example.com</td>\n","      <td>0494-05-3136</td>\n","      <td>080-6575-1815</td>\n","      <td>347-1039</td>\n","      <td>埼玉県南埼玉郡宮代町川端2-4-202</td>\n","      <td>有限会社ツカサ</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>吉池 博子</td>\n","      <td>よしいけ ひろこ</td>\n","      <td>27</td>\n","      <td>1995年08月28日</td>\n","      <td>女</td>\n","      <td>O</td>\n","      <td>yoshiike_hiroko@example.com</td>\n","      <td>03-0362-8237</td>\n","      <td>070-3530-6019</td>\n","      <td>202-5618</td>\n","      <td>東京都渋谷区恵比寿1-1-18</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>坂本 亜紀子</td>\n","      <td>さかもと あきこ</td>\n","      <td>42</td>\n","      <td>1980年12月13日</td>\n","      <td>女</td>\n","      <td>A</td>\n","      <td>sakamoto1213@example.ne.jp</td>\n","      <td>0564-53-7373</td>\n","      <td>080-8975-8091</td>\n","      <td>445-2380</td>\n","      <td>愛知県名古屋市西区上名古屋3-3-903</td>\n","      <td>株式会社HERO</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>山口 千尋</td>\n","      <td>やまぐち ちひろ</td>\n","      <td>29</td>\n","      <td>1993年09月09日</td>\n","      <td>女</td>\n","      <td>A</td>\n","      <td>yamaguchi99@example.co.jp</td>\n","      <td>098-040-1206</td>\n","      <td>070-5670-2041</td>\n","      <td>903-9529</td>\n","      <td>沖縄県那覇市おもろまち1-1-22</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85c3a764-fb19-4320-98a9-dddbc342bc93')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-85c3a764-fb19-4320-98a9-dddbc342bc93 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-85c3a764-fb19-4320-98a9-dddbc342bc93');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a713e413-af9c-49c4-9e42-1b5769f1cd23\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a713e413-af9c-49c4-9e42-1b5769f1cd23')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a713e413-af9c-49c4-9e42-1b5769f1cd23 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d3ede52e-7495-4fa3-9152-d85d2fe6f30e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('personal_info')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d3ede52e-7495-4fa3-9152-d85d2fe6f30e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('personal_info');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"personal_info","summary":"{\n  \"name\": \"personal_info\",\n  \"rows\": 200,\n  \"fields\": [\n    {\n      \"column\": \"\\u6c0f\\u540d\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"\\u5c0f\\u897f \\u7adc\\u4e5f\",\n          \"\\u95a2\\u91ce \\u539a\\u5b50\",\n          \"\\u5ee3\\u702c \\u52c9\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6c0f\\u540d\\uff08\\u3072\\u3089\\u304c\\u306a\\uff09\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"\\u3053\\u306b\\u3057 \\u305f\\u3064\\u3084\",\n          \"\\u305b\\u304d\\u306e \\u3042\\u3064\\u3053\",\n          \"\\u3072\\u308d\\u305b \\u3064\\u3068\\u3080\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 20,\n        \"max\": 80,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          67,\n          29,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u751f\\u5e74\\u6708\\u65e5\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"1965\\u5e7401\\u670825\\u65e5\",\n          \"1996\\u5e7408\\u670816\\u65e5\",\n          \"1991\\u5e7404\\u670816\\u65e5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u7537\",\n          \"\\u305d\\u306e\\u4ed6\\u30fb\\u4e0d\\u660e\",\n          \"\\u5973\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u8840\\u6db2\\u578b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"O\",\n          \"AB\",\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30e1\\u30fc\\u30eb\\u30a2\\u30c9\\u30ec\\u30b9\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"konishi125@example.org\",\n          \"sekinoatsuko@example.co.jp\",\n          \"hirose416@example.org\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u96fb\\u8a71\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"03-0150-4008\",\n          \"06-5753-6240\",\n          \"046-156-1317\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u643a\\u5e2f\\u96fb\\u8a71\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"050-7090-3759\",\n          \"050-7596-0486\",\n          \"080-8565-4055\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u90f5\\u4fbf\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 200,\n        \"samples\": [\n          \"193-7966\",\n          \"585-6522\",\n          \"233-3474\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4f4f\\u6240\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 198,\n        \"samples\": [\n          \"\\u4f50\\u8cc0\\u770c\\u4f50\\u8cc0\\u5e02\\u795e\\u91ce\\u67714-3-4\",\n          \"\\u6771\\u4eac\\u90fd\\u5343\\u4ee3\\u7530\\u533a\\u4e5d\\u6bb5\\u53173-1-8\\u30cf\\u30a4\\u30bf\\u30a6\\u30f3815\",\n          \"\\u6771\\u4eac\\u90fd\\u4e16\\u7530\\u8c37\\u533a\\u7528\\u8cc04-2-4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4f1a\\u793e\\u540d\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 124,\n        \"samples\": [\n          \"\\u30aa\\u30ea\\u30aa\\u30f3\\u901a\\u4fe1\\u30cd\\u30c3\\u30c8\\u30ef\\u30fc\\u30af\\u30b9\\u5408\\u8cc7\\u4f1a\\u793e\",\n          \"\\u682a\\u5f0f\\u4f1a\\u793e\\u30d5\\u30a7\\u30ea\\u30b9\",\n          \"\\u5408\\u540c\\u4f1a\\u793e\\uff42\\uff52\\uff49\\uff44\\uff47\\uff45\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}],"source":["import pandas as pd\n","personal_info = pd.read_csv(\"https://drive.google.com/uc?id=17jpKCf-Qdo3IVObiF1WJzFRdEXWdYVHt\")\n","personal_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"09SLscz8qQXc"},"outputs":[],"source":["# ヒント 1: 男性のみを抽出する\n","personal_info[personal_info['性別'] == '男']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rxrs1odbqQXd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724312971317,"user_tz":-540,"elapsed":7,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"1d5c1efb-3a81-4250-8d7c-8d96e6b41b5c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["200"]},"metadata":{},"execution_count":37}],"source":["# ヒント 2: personal_infoの登録件数を計算する\n","len(personal_info)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bg7qGVpHqQXd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724314112450,"user_tz":-540,"elapsed":388,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"45658778-c5ef-4db5-f4f1-1ac43167afbe"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of people with mobile numbers ending in '11': 3\n"]}],"source":["# 確認テスト(1) : 携帯電話番号の下2桁が `11` である人の人数\n","# 回答にはここで計算した人数を数値で入力してください\n","# end11 = re.compile(r'11$')\n","\n","# Define the regex pattern\n","end11 = re.compile(r'11$')\n","\n","# Initialize count\n","count = 0\n","\n","# Iterate through the '携帯電話番号' column and count\n","for number in personal_info['携帯電話番号']:\n","  if end11.search(str(number)):\n","    count += 1\n","\n","print(\"Number of people with mobile numbers ending in '11':\", count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ksINCPWRqQXe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724314667112,"user_tz":-540,"elapsed":418,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"b6539d6d-6952-406c-a457-d82516975f64"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of people with early birthdays: 57\n"]}],"source":["# 確認テスト(2) : 早生まれの人数\n","# 回答にはここで計算した人数を数値で入力してください\n","early = re.compile(r'.年0[1-3]月.')\n","count=0\n","\n","for birthday in personal_info['生年月日']:\n","  if early.search(str(birthday)):\n","    count += 1\n","\n","print(\"Number of people with early birthdays:\", count)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xulfhb3fqQXf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724314851928,"user_tz":-540,"elapsed":641,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"bf565278-2d5b-4fa1-d6b5-e357d4890cf4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of people living in Tokyo: 60\n"]}],"source":["# 確認テスト(3) : 東京23区に住む人数を答えてください\n","# 回答にはここで計算した人数を数値で入力してください\n","\n","liveTokyo = re.compile(r'東京都.*区.*')\n","count=0\n","\n","for birthday in personal_info['住所']:\n","  if liveTokyo.search(str(birthday)):\n","    count += 1\n","\n","print(\"Number of people living in Tokyo:\", count)"]}],"metadata":{"colab":{"provenance":[{"file_id":"1GD7FbAqrM9IVSM7Hpax-PxeDHl9ORIXl","timestamp":1724306232096}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.6"}},"nbformat":4,"nbformat_minor":0}