{"cells":[{"cell_type":"markdown","metadata":{"id":"l5H9UtUTe55_"},"source":["| Version | Published Date| Details |\n","| -- | -- | -- |\n","| ver.1.0.0 | 2023/8/29 | 初版 |\n","| ver.1.0.1 | 2023/9/01 | 問題に補足を追記 |"]},{"cell_type":"markdown","metadata":{"id":"MAtlY0aUCLeV"},"source":["# 正規表現についてもっと詳しくなろう\n","\n","Station1 では強力なツールである **正規表現** について学びました。まずは数字のパターンを検出できるようになりましたが，このStationではより詳しく正規表現を学びます。正規表現は書き方もややむずかしく，学ぶこともより増えますが，引き続きしっかり習得していきましょう。"]},{"cell_type":"markdown","metadata":{"id":"y9cBlG2vMIIa"},"source":["# 正規表現によるパターンマッチの続き\n","\n","## `()` を用いたグルーピング\n","\n","前回のStationでも `group()` を使いました。これは正規表現の機能のひとつです。\n","\n","電話番号を市外局番とそれ以降に分けて取得するとしましょう。その場合は `(\\d\\d\\d\\d)-(\\d\\d-\\d\\d\\d\\d)` のように正規表現に `()` を追加してグループを作成します。そして `group()` ごとにマッチした文字列を取得します。\n","\n","`()` で囲まれたグループごとにグループ1, 2, ... となります。`group()` メソッドに `1` や `2` を渡すとマッチした文字列の異なる部分を取得できます。`0` を渡すかなにも渡さなければマッチした文字列全体が返ります。"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"TXCUGHNPQiLO","executionInfo":{"status":"ok","timestamp":1724303458894,"user_tz":-540,"elapsed":340,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}}},"outputs":[],"source":["import re"]},{"cell_type":"markdown","metadata":{"id":"U0rbHXKGQijc"},"source":["今回もまずは `re` を `import` します。"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"AS6zI97uMCDt","executionInfo":{"status":"ok","timestamp":1724303596699,"user_tz":-540,"elapsed":415,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}}},"outputs":[],"source":["phone_num_regex = re.compile(r'(\\d\\d\\d\\d)-(\\d\\d-\\d\\d\\d\\d)')\n","mo = phone_num_regex.search('私の電話番号は0120-56-7890です。')"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"BcL1sf7uQfs_","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303600497,"user_tz":-540,"elapsed":373,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"e5952940-7731-4729-bd39-ff4bc292bcda"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'0120'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}],"source":["mo.group(1)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"t5N_qrJoQoug","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303600939,"user_tz":-540,"elapsed":19,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"60f2c029-dbd7-4cfc-855d-e5133e1e7532"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'56-7890'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}],"source":["mo.group(2)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"RTDdLwueQuMx","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303600940,"user_tz":-540,"elapsed":15,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"33c7c69e-223f-4e20-c58a-6ab252225817"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'0120-56-7890'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}],"source":["mo.group()"]},{"cell_type":"markdown","metadata":{"id":"V4tTiCzoRl-F"},"source":["`groups()` を使うとすべてのグループを一気に取得できます。`group()` と違って `s` がつく `groups()` になっていることに注意しましょう。"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"6mJaaUNkQwJY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724303657634,"user_tz":-540,"elapsed":417,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"bc6c422a-1df3-4bbf-9467-006eb9860660"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["('0120', '56-7890')"]},"metadata":{},"execution_count":6}],"source":["mo.groups()"]},{"cell_type":"markdown","metadata":{"id":"jfdzyqpPSdGB"},"source":["`groups()` は複数の値からなるタプルを返すため，このように複数代入を行うこともできます。"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"OGAoJvZZRz4Z","executionInfo":{"status":"ok","timestamp":1724303687082,"user_tz":-540,"elapsed":279,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}}},"outputs":[],"source":["area_code, main_number = mo.groups()"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"idaaph3YR1yY","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303687511,"user_tz":-540,"elapsed":11,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"c4bee654-dca8-4178-e07f-24d160455e8d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'0120'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}],"source":["area_code"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"7nB4Co_1R2pg","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303687845,"user_tz":-540,"elapsed":10,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"6712ad77-af61-4489-fcfb-e0a208a6b370"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'56-7890'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":9}],"source":["main_number"]},{"cell_type":"markdown","metadata":{"id":"rlAVnNIVSluG"},"source":["正規表現では `()` は特別な意味を持ちます。では `()` そのものを検索したい場合はどうすればよいでしょうか？たとえば市外局番が `()` を使って書かれていることもあります。このような場合にはバックスラッシュ `\\` を使って `()` を **エスケープ (Escape)** する必要があります。"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"lPpzVpW6R5CH","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303716822,"user_tz":-540,"elapsed":328,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"9d56f545-1128-4ff5-990e-294f84571384"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'(0120)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}],"source":["phone_num_regex = re.compile(r'(\\(\\d\\d\\d\\d\\)) (\\d\\d-\\d\\d\\d\\d)')\n","mo = phone_num_regex.search('私の電話番号は (0120) 23-4234 です。')\n","mo.group(1)"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"17c_A4EvTe0d","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303717298,"user_tz":-540,"elapsed":8,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"37cba4f8-97e8-4951-9d5e-dd57e89ed303"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'23-4234'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":11}],"source":["mo.group(2)"]},{"cell_type":"markdown","metadata":{"id":"qmYWfKyNWQOZ"},"source":["正規表現では以下の文字は特別な意味を持ちます。これらの文字を用いる場合は同様に `\\` を用いるようにしましょう。\n","\n","```\n",".  ^  $  *  +  ?  {  }  [  ]  \\\\  |  (  )\n","```"]},{"cell_type":"markdown","metadata":{"id":"SbQh1ofPWtsW"},"source":["## `|` を用いた複数グループとのマッチ\n","\n","`|` を用いると，複数パターンのうちのひとつとマッチできます。たとえば `r'Tokyo|Osaka'` という正規表現は `Tokyo` または `Osaka` とマッチします。すべてのマッチした箇所を取得する `finaall()` メソッドについては後で解説します。\n","\n","検索対象に `Tokyo` と `Osaka` の両方がある場合，先に出現した方が `Match` オブジェクトとして返ります。"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"FMIPHMNAXFM0","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303981997,"user_tz":-540,"elapsed":330,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"8b031358-6f35-4e66-f738-b643651e1afa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyo'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":12}],"source":["city_regex = re.compile(r'Tokyo|Osaka')\n","mo1 = city_regex.search('Tokyo and Osaka')\n","mo1.group()"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"vPUuwKCHXQQy","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724303982466,"user_tz":-540,"elapsed":13,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"a02f61de-71d5-4ce1-ea38-100e8091deec"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Osaka'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":13}],"source":["mo2 = city_regex.search('Osaka and Tokyo')\n","mo2.group()"]},{"cell_type":"markdown","metadata":{"id":"3QvYD7irYCDY"},"source":["縦線は，複数パターンのうち1つにマッチするためにも使えます。たとえば `Tokyo` `Tokai` `Tokio` `Tokiwa` のいずれかにマッチさせたい場合を考えます。この場合すべて `Tok` からはじまるため，接頭辞として一度だけマッチすればよいでしょう。"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"OkKGmdB3XY2q","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304144078,"user_tz":-540,"elapsed":493,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"8ba30b7e-56b1-41d6-8f05-b1de4de5e421"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyo'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":14}],"source":["tok_regex = re.compile(r'Tok(yo|ai|io|iwa)')\n","mo = tok_regex.search(\"Tokyo station is very beautiful.\")\n","mo.group()"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"OSWMYp_aY41C","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304147616,"user_tz":-540,"elapsed":454,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"22ffec4d-7591-49be-e90e-540a21653381"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'yo'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":15}],"source":["mo.group(1)"]},{"cell_type":"markdown","metadata":{"id":"PCooRGjXaxbe"},"source":["引数をつけずに `group()` を呼び出すとマッチした文字列全体を，`group(1)` のように呼び出すと1番目 `()` のグループ内にマッチした文字列だけを取得できます。"]},{"cell_type":"markdown","metadata":{"id":"OniP53jBbGNw"},"source":["## `?` を用いた任意のマッチ\n","\n","マッチしてもしなくてもよいパターンを指定したい場合があります。つまりテキストの一部があってもなくてもいい場合です。 `?` を用いるとその直前のパターンを任意パターンとして指定します。"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"28wAijRQauCd","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304583675,"user_tz":-540,"elapsed":330,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"0a0a584d-f2bc-4fae-c6aa-f0b6baa036f7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyo'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":16}],"source":["tokyo_regex = re.compile(r'Toky(ot)?o')\n","mo1 = tokyo_regex.search('Tokyo')\n","mo1.group()"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"k5c0n1f3bwKj","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304706168,"user_tz":-540,"elapsed":460,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"2b87dc59-a807-4892-99ee-4f3938bfd8fc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyoto'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":18}],"source":["mo2 = tokyo_regex.search('Tokyoto')\n","mo2.group()"]},{"cell_type":"markdown","metadata":{"id":"QYLDf3YZcHOF"},"source":["正規表現の `(ot)?` の部分は `ot` というパターンが任意であることを意味します。そのため正規表現は `ot` が0回または1回現れるテキストにマッチします。そのため `Tokyo` にも `Tokyoto` にもマッチします。\n","\n","市外局番のあるなしに関わらず電話番号を検索したいとしましょう。その場合はこのように書けます。"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"_vhlipWfb92u","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304767627,"user_tz":-540,"elapsed":279,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"0d6f36c6-1341-4c7a-b3fc-7092dd0454c2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'0120-23-4234'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":19}],"source":["phone_num_regex = re.compile(r'(\\d\\d\\d\\d-)?\\d\\d-\\d\\d\\d\\d')\n","mo1 = phone_num_regex.search('私の電話番号は 0120-23-4234 です。')\n","mo1.group()"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"514QNLOlcrKU","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304768885,"user_tz":-540,"elapsed":23,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"654855b6-e18a-4b22-fa8b-d739e1f04d0a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'23-4234'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":20}],"source":["mo2 = phone_num_regex.search('私の電話番号は 23-4234 です。')\n","mo2.group()"]},{"cell_type":"markdown","metadata":{"id":"XK9ip-lec11G"},"source":["同様にこの場合は `?` は「直前のグループに0または1回マッチする」とみなせます。"]},{"cell_type":"markdown","metadata":{"id":"dxW_5_gL1MwW"},"source":["## `*` を用いた0回以上のマッチ\n","\n","`*` は「0回以上にマッチする」という意味です。アスタリスクの直前のグループが任意の回数出現してもよいということです。まったく出現しなくてもよいし，繰り返し出現しても問題ありません。"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"QCcswm13cvdt","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304800112,"user_tz":-540,"elapsed":262,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"eeb4cc8c-61c8-4eb6-c848-e46c12ec461b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyo'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":21}],"source":["tokyo_regex = re.compile(r'Toky(ot)*o')\n","mo1 = tokyo_regex.search('Tokyo is the capital of Japan.')\n","mo1.group()"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"1UYFgPLZ1nWM","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304801194,"user_tz":-540,"elapsed":15,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"3e193707-17c5-43bc-93f0-24592cca025e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyoto'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":22}],"source":["mo2 = tokyo_regex.search('Tokyoto is the capital of Japan.')\n","mo2.group()"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"QMjjgHSc1sCY","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304806969,"user_tz":-540,"elapsed":300,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"3a916e5d-cbd6-4021-833e-c0d8764fabfe"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyototototo'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":23}],"source":["mo3 = tokyo_regex.search('Tokyototototo is the capital of Japan.')\n","mo3.group()"]},{"cell_type":"markdown","metadata":{"id":"bbMLQkrP12Ls"},"source":["`Tokyo` に関しては `(ot)*` の正規表現が0回，`Tokyoto` に関しては1回，`Tokyototototo` に関しては4回マッチします。"]},{"cell_type":"markdown","metadata":{"id":"D-I-elef2Di5"},"source":["## `+` を用いた1回以上のマッチ\n","\n","`*` が0回以上にマッチするのに対して `+` は「1回以上マッチ」することを意味します。プラスは少なくとも1回出現する必要があります。"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"vu2cH3cH1ySg","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304816045,"user_tz":-540,"elapsed":292,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"a23ca2f8-730e-4c61-9052-47509ff1079b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyoto'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":24}],"source":["tokyo_regex = re.compile(r'Toky(ot)+o')\n","mo1 = tokyo_regex.search('Tokyoto is the capital of Japan.')\n","mo1.group()"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"sP4x1lWw2UDg","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304817334,"user_tz":-540,"elapsed":14,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"b1e60e38-f7ff-447c-9b1e-e88c070d4c62"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tokyototototo'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":25}],"source":["mo2 = tokyo_regex.search('Tokyototototo is the capital of Japan.')\n","mo2.group()"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"iV_-Yrod2Y06","colab":{"base_uri":"https://localhost:8080/","height":159},"executionInfo":{"status":"error","timestamp":1724304817735,"user_tz":-540,"elapsed":11,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"e6f7cf1d-ae32-488a-9ac9-26a82beb5b39"},"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'NoneType' object has no attribute 'group'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-69462e3e1342>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmo3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtokyo_regex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msearch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Tokyo is the capital of Japan.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmo3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'group'"]}],"source":["mo3 = tokyo_regex.search('Tokyo is the capital of Japan.')\n","mo3.group()"]},{"cell_type":"markdown","metadata":{"id":"DdIWnv3q2l_s"},"source":["`mo3` にマッチするものがないため `group()` を呼ぶとエラーになります。エラーコードを読みましょう。 *'NoneType' object has no attribute 'group'* とは「 `None` の型のオブジェクトには `group` という属性はありません」という意味です。"]},{"cell_type":"markdown","metadata":{"id":"aIzw_VDg3YTv"},"source":["## `{}` による繰り返し回数の指定\n","\n","`{}` を使うとグループの繰り返し出現回数を指定できます。たとえば `(Wa){3}` という正規表現は `WaWaWa` という文字列にマッチしますが `WaWa` にはマッチしません。`Wa` が2回しか現れないためです。\n","\n","繰り返し回数は単一の数字だけでなく，カンマ区切りで最大値と最小値の指定が可能です。たとえば `(Ma){3,5}` は `MaMaMa` にも `MaMaMaMa` にも `MaMaMaMaMa` にもマッチします。\n","\n","片方を省略すると最小値と最大値を指定しないことになります。たとえば `(Wa){3,}` とすると `(Wa)` が3回以上， `(Wa){,5}` とすると0~5回出現する場合にマッチします。\n","\n","`{}` を使うと正規表現を短く書くのに役立ちます。`(Ma){3}` と `MaMaMa` ， `(Ma){3,5}` と `MaMaMa|MaMaMaMa|MaMaMaMaMa` はそれぞれ同じ意味です。"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"HSvsZAV_2hZg","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304873118,"user_tz":-540,"elapsed":298,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"82616d43-6a25-4c40-8569-87cf11710578"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'HaHaHa'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":27}],"source":["ha_regex = re.compile(r'(Ha){3}')\n","mo1 = ha_regex.search('HaHaHa')\n","mo1.group()"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"KeBuXn8T51At","colab":{"base_uri":"https://localhost:8080/","height":159},"executionInfo":{"status":"error","timestamp":1724304873539,"user_tz":-540,"elapsed":11,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"e01b15fc-53cb-4a98-d2e8-354ee3ad54ca"},"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'NoneType' object has no attribute 'group'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-e2efd4b28356>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmo2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mha_regex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msearch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Ha'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmo2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'group'"]}],"source":["mo2 = ha_regex.search('Ha')\n","mo2.group()"]},{"cell_type":"markdown","metadata":{"id":"O7aoBeID55GU"},"source":["これも `Ha` ひとつだけではマッチしないため，同じようにエラーになります。"]},{"cell_type":"markdown","metadata":{"id":"liMsUMM96Yf-"},"source":["## 貪欲マッチと非貪欲マッチ\n","\n","ところで `MaMaMaMaMa` という文字列に対して `(Ma){3,5}` というパターンは `Ma` が3回，4回，5回のいずれの場合にもマッチします。先の例で `group()` を呼び出すと，少ない回数でマッチせずに最大回数にマッチした `MaMaMaMaMa` が返ってきます。 `MaMaMa` も `MaMaMaMa` も `(Ma){3,5}` に正しくマッチするにも関わらず，です。\n","\n","これはなぜでしょうか？なぜならPythonの正規表現はデフォルトでは **貪欲 (Greedy)** にマッチするためです。つまり複数の可能性のあるものは最も長いものにマッチします。一方で `)` の後に `?` をつけると **怠惰 (Lazy)** あるいは **非貪欲** なマッチを意味し，最も短いものにマッチするようになります。\n","\n","「貪欲」と「怠惰」というのはは、コンピューターサイエンスにおいてアルゴリズムの設計でよく使われる用語です。興味がある方はそれぞれの言葉を調べてみてください。"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"h8lVX4zQ8oU0","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724304941810,"user_tz":-540,"elapsed":400,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"8605f5aa-4cd1-48e0-cb07-f2c2122ad4a6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'HaHaHaHaHa'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":29}],"source":["greedy_ha_regex = re.compile(r'(Ha){3,5}')\n","mo1 = greedy_ha_regex.search(r'HaHaHaHaHa')\n","mo1.group()"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"jrQ_69SD88Wq","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724305148317,"user_tz":-540,"elapsed":290,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"9f5f7fae-a947-48aa-fb24-a6225b59a732"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'HaHaHa'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":30}],"source":["lazy_ha_regex = re.compile(r'(Ha){3,5}?')\n","mo2 = lazy_ha_regex.search(r'HaHaHaHaHa')\n","mo2.group()"]},{"cell_type":"markdown","metadata":{"id":"aJ5r9JUe9JPX"},"source":["正規表現において `?` が「任意グループの指定」と「非貪欲マッチ」の2種類の意味を持つことに注意しましょう。"]},{"cell_type":"markdown","metadata":{"id":"IFpwnZXqGIut"},"source":["## `findall()` メソッド\n","\n","今までは `Regex` オブジェクトにおける `search()` を主に用いてきましたが，他に `findall()` メソッドがあります。"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"cxV9lCiiGcZY","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1724305260281,"user_tz":-540,"elapsed":344,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"feadf982-bbb6-450a-e8bd-d2b500748896"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'55-4433'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":31}],"source":["phone_num_regex = re.compile(r'\\d\\d-\\d\\d\\d\\d')\n","mo = phone_num_regex.search('自宅の電話番号は 55-4433 です。会社の電話番号は 23-4234 です。')\n","mo.group()"]},{"cell_type":"markdown","metadata":{"id":"7erS09TiISf1"},"source":["`search()` は最初に見つかった `Match` オブジェクトを返すのに対して `findall()` は文字列のリストを返します。リストの各要素はマッチした文字列です。"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"iHcQKXcgGq-e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724305270537,"user_tz":-540,"elapsed":1036,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"27d6b53c-e9a8-4e3a-e68d-2f3e2b0d7d3d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['55-4433', '23-4234']"]},"metadata":{},"execution_count":32}],"source":["phone_num_regex = re.compile(r'\\d\\d-\\d\\d\\d\\d')\n","phone_num_regex.findall('自宅の電話番号は 55-4433 です。会社の電話番号は 23-4234 です。')"]},{"cell_type":"markdown","metadata":{"id":"VgLvW999JJfd"},"source":["正規表現にグループが含まれている場合 `findall()` はタプルのリストを返します。各タプルの要素は，正規表現のグループに対応しマッチした文字列です。 `findall()` の動作を確認しましょう。"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"x5JiCAamJKDZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724305286088,"user_tz":-540,"elapsed":1007,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"915968d4-c40d-40c1-af16-cec31bec76ba"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('(0345)', '55-4433'), ('(0120)', '23-4234')]"]},"metadata":{},"execution_count":33}],"source":["phone_num_regex = re.compile(r'(\\(\\d\\d\\d\\d\\)) (\\d\\d-\\d\\d\\d\\d)')\n","mo = phone_num_regex.findall('自宅の電話番号は (0345) 55-4433 です。会社の電話番号は (0120) 23-4234 です。')\n","mo"]},{"cell_type":"markdown","metadata":{"id":"20pA9OIFKO0a"},"source":["`findall()` メソッドの返り値についてのまとめです。\n","\n","- グループのない正規表現の場合，マッチした文字列のリストを返す。\n","- グループのある正規表現の場合，グループに対応した文字列のタプルのリストを返す。"]},{"cell_type":"markdown","metadata":{"id":"Xn8VxLhzLGy3"},"source":["# 確認テスト\n","\n","- 東京都の電話番号にマッチする正規表現を書いてください。東京都の電話番号とは `03-1234-5678` のように市外局番 `03` のあとに数字4ケタ，ハイフン，数字4ケタの順で続くものとします。\n","  - 簡潔に書ける場合はなるべく簡潔な表現を使用してください。例えば `\\d\\d\\d\\d\\d\\d\\d\\d` は `\\d{8}` とする、などです。\n","- `東京` と `京都` と `京` と `東京都` にマッチする正規表現を書いてください。\n","  - 東京都が東京としてマッチしてしまわないように注意しましょう\n","  - 簡潔に書ける場合はなるべく簡潔な表現を使用してください。例えば、`あ{0,1}` は `あ?` でよく、`あ{0}` は単に `あ` でよい、などです。"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"6D1ZOoGFe56N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724305548131,"user_tz":-540,"elapsed":315,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"92ffa0c8-0d0a-43e0-b5a0-aaeabd4455a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["マッチした電話番号が見つかりました: 03-1234-5678\n"]}],"source":["# 確認テスト (1)\n","import re\n","mo = re.search(\n","    r'03-\\d{4}-\\d{4}'# <- ここに正規表現を書きます (ここに記入した内容を回答フォームに登録してください)\n","    , '東京オフィス:03-1234-5678、大阪オフィス:06-1234-5678')\n","print(f'マッチした電話番号が見つかりました: {mo.group()}')"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"QgIM_H1se56N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724306078985,"user_tz":-540,"elapsed":444,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"98700914-823a-4398-aedf-7f473a01b37b"},"outputs":[{"output_type":"stream","name":"stdout","text":["マッチした文字列が見つかりました: ['東京', '東京都', '京都', '京']\n"]}],"source":["# 確認テスト (2)\n","import re\n","mo = re.findall(\n","    r'東?京都?'# <- ここに正規表現を書きます (ここに記入した内容を回答フォームに登録してください)\n","    , '弊社は東京オフィスが東京都千代田区にあり、京都オフィスがプラザ京にあります。')\n","print(f'マッチした文字列が見つかりました: {mo}')"]}],"metadata":{"colab":{"provenance":[{"file_id":"16QwAM9vpXqOXQa8LjP-rczZFBbS3feJK","timestamp":1724303363748}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.6"}},"nbformat":4,"nbformat_minor":0}