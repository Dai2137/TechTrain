{"cells":[{"cell_type":"markdown","metadata":{"id":"ZpBZ8Hh7pGVB"},"source":["| Version | Published Date| Details |\n","| -- | -- | -- |\n","| ver.1.0.0 | 2023/3/29 | 初版リリース |"]},{"cell_type":"markdown","metadata":{"id":"niOBbPB8r4wS"},"source":["# もっとPythonを使えるようになろう\n","\n","Station1ではPythonの基本的な操作について学びました。変数，コメント，型，代入，算術演算子，比較演算子については覚えているでしょうか？\n","\n","さてStation2では，より本格的にPythonの操作について学びます。具体的にはメソッドや複合データ型といった概念を学びます。見慣れない単語が出てきて戸惑ってしまうかもしれませんが，Pythonでデータ分析を学ぶにはとても重要な概念です。きちんと理解して次に進みましょう。"]},{"cell_type":"markdown","metadata":{"id":"nfsNzJ8htv7W"},"source":["# メソッド\n","\n","Station1で学んだ `str` 型の変数には，いくつか便利な機能があります。たとえば，文字列の持つすべての文字を大文字や小文字に変換する `lower()` や `upper()` といった機能があります。こういった型が持つ関数のことを **メソッド (Method)** と呼びます。"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"9m5vR_KCurNu","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1723550243466,"user_tz":-540,"elapsed":20,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"afeb98f7-0426-4ff0-ec02-b6078df3dc69"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Techtrain'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":1}],"source":["name = \"Techtrain\"\n","name"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"kUvxpx4buuTA","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1723550243466,"user_tz":-540,"elapsed":17,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"6d22e419-a08f-4a45-f1da-a669e2dd5a87"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'techtrain'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}],"source":["# 小文字に変換する\n","name.lower()"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"fzFfblOyuxK1","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1723550243467,"user_tz":-540,"elapsed":15,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"cbdfa90f-7658-4bc3-c250-0801f9d54963"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'TECHTRAIN'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}],"source":["# 大文字に変換する\n","name.upper()"]},{"cell_type":"markdown","metadata":{"id":"ERX26VBsu3KE"},"source":["## 文字列メソッド\n","\n","よく使う文字列メソッドのひとつに `format()` があります。これはある文字列の一部分に，あとから別の文字列を埋め込むために使用します。対象の文字列には `{}` であらかじめ値を埋め込みたい部分を指定する必要があります。"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"3UNcxPi6u0Ae","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1723550731196,"user_tz":-540,"elapsed":357,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"5fc5449c-f368-49e3-a99a-f3b61bc77389"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'TechTrain チュートリアルへようこそ'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}],"source":["name = \"TechTrain\"\n","'{} チュートリアルへようこそ'.format(name)"]},{"cell_type":"markdown","metadata":{"id":"YgvZkcXavcuU"},"source":["またPythonのバージョン3.7以降からは [**フォーマット済み文字列リテラル (f-string)**](https://docs.python.org/ja/3.8/tutorial/inputoutput.html#formatted-string-literals) という記法を使って値を埋め込むこともできるようになりました。文字列の頭に `f` をつけ `{name}` と書くことで使用できます。\n","\n","バージョン3.7というのはPythonの世代のことです。数字がより大きい方が新しいバージョンです。このStationをこなすうえでPythonのバージョンを気にする必要はありませんが，場合によっては使えない機能であることを覚えておきましょう。"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"972cUTFwvNM2","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1723550759536,"user_tz":-540,"elapsed":397,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"6861243a-0b56-4eca-8f54-0f412b625db8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'TechTrain チュートリアルへようこそ'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}],"source":["f'{name} チュートリアルへようこそ'"]},{"cell_type":"markdown","metadata":{"id":"bZO3ppeWwo2G"},"source":["## 浮動小数点がもつメソッド\n","\n","メソッドは `str` 型の変数が持つわけではありません。 `int` 型の変数や `float` 型の変数にも，それぞれの特徴に合わせた機能がメソッドとして提供されています。\n","\n","たとえば `float` 型の変数には `as_integer_ratio()` というメソッドがあり，比がその浮動小数点の値となるような整数の組を返します。\n","\n","たとえば 0.5 という数値は，分数で表すと $\\frac{1}{2}$ です。これは以下のように調べられます。"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"QRhaPBz0wsx2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550863962,"user_tz":-540,"elapsed":343,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"d9e0a78c-05c0-4eb4-8082-9b4ef4a435e8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2)"]},"metadata":{},"execution_count":6}],"source":["0.5.as_integer_ratio()"]},{"cell_type":"markdown","metadata":{"id":"_itOZoMUx48S"},"source":["0.75 であれば $\\frac{3}{4}$ といった具合です。"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"py48qFejx24w","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550871586,"user_tz":-540,"elapsed":7,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"2aab7cfc-a950-453f-b007-678f8c7cf6d3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3, 4)"]},"metadata":{},"execution_count":7}],"source":["0.75.as_integer_ratio()"]},{"cell_type":"markdown","metadata":{"id":"2Ilkn2U0yDgo"},"source":["他にもこのようなメソッドは多数存在しており，すべてを列挙することはできません。興味のある方は [Pythonの公式ドキュメント](https://docs.python.org/ja/3/library/stdtypes.html#numeric-types-int-float-complex) を読んでみると楽しいでしょう。\n","\n","**公式ドキュメント** というのはPython公式の取り扱い説明書のようなものです。家電製品を使う前に取り扱い説明書をすみずみまで読む人が少ないように，Pythonを使う前にすべてに目を通す必要はありません。しかし，なにか不具合が起こったとき，新しい使い方をしたいときなど，場合によって参照するとよいでしょう。"]},{"cell_type":"markdown","metadata":{"id":"8Bj8rHH-yxKm"},"source":["# 複合データ型\n","\n","これまでは `b = 2` のように，ひとつの変数にひとつの値を代入する場合だけを扱ってきました。しかし現実には，複数の値をまとめて取り扱いたい場合もあります。Pythonでは複数の変数や値をまとめて扱うのに便利な，以下のような複合データ型があります。\n","\n","- リスト `list`\n","- タプル `tuple`\n","- 辞書 `dictionary`"]},{"cell_type":"markdown","metadata":{"id":"g3TYPDX6zKIn"},"source":["## リスト\n","\n","複数の変数をカンマ `,` で区切り，その全体を `[]` で囲んだものを **リスト (List)** と呼びます。リストに含まれる値のことを **要素** と呼び，整数の **インデックス (要素番号)** を使って値にアクセスします。リストは非常によく使う型であるため，きちんと覚えておきましょう。\n","\n","他のプログラミング言語では **アレイ (Array)** や **配列** と呼ばれることもあります。"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"4AAxs7GHyBXM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550905886,"user_tz":-540,"elapsed":322,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"74539258-bdc2-4373-b77a-3c7b8ebf0c14"},"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3, 4, 5]\n"]}],"source":["# リスト型の変数を定義\n","numbers = [2, 3, 4, 5]\n","\n","# 値の確認\n","print(numbers)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"a1yrtUgVzuri","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550907477,"user_tz":-540,"elapsed":4,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"0f557cd9-6b15-4c54-f6a9-139c83ced5fa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{},"execution_count":9}],"source":["# 型の確認\n","type(numbers)"]},{"cell_type":"markdown","metadata":{"id":"pIJ_nBsEz54N"},"source":["`numbers` には4つの数値が入っていて **要素数** は4です。リストの要素数はリストの **長さ (Length)** とも呼ばれ，組み込み関数の `len()` を使って取得できます。 `len()` は非常によく使う関数であるため，ここで覚えておきましょう。"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"VBbheyhK2mFg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550911212,"user_tz":-540,"elapsed":365,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"463c8b43-cc90-4637-908b-4035351fa2ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":10}],"source":["# 要素数の確認\n","len(numbers)"]},{"cell_type":"markdown","metadata":{"id":"xAZSecwQ2uZi"},"source":["### インデックス\n","\n","リストの各要素へアクセスする方法はいくつもあります。もっとも簡単な方法は `[]` を使ってアクセスしたい要素のインデックスを指定することです。これによりリストから値を取り出したり，その位置の値を書き換えたりできます。\n","\n","ここで **Pythonでは先頭の要素のインデックス番号が `0`** であることに注意しましょう。2番目の要素の番号は `2` ではなく `1` です。"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"Jq3EWp446ABs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550925537,"user_tz":-540,"elapsed":552,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"6139d663-34c8-4119-ae4b-01a3f71346e1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":11}],"source":["# 先頭の要素にアクセス\n","numbers[0]"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"MX_nEkF76E_7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550926933,"user_tz":-540,"elapsed":5,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"9dbb2d44-50a0-4b09-8198-05f49216ac05"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":12}],"source":["# 先頭から4番目の要素にアクセス\n","numbers[3]"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"AEkcnq-66JCi","executionInfo":{"status":"ok","timestamp":1723550929766,"user_tz":-540,"elapsed":3,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}}},"outputs":[],"source":["# 2番目の要素を書き換え\n","numbers[1] = 100"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"MvYKAvu26O5j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723550930149,"user_tz":-540,"elapsed":4,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"c646dfec-6e0b-47b4-b2da-369d0cad9b8d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 100, 4, 5]"]},"metadata":{},"execution_count":14}],"source":["# 値の確認\n","numbers"]},{"cell_type":"markdown","metadata":{"id":"CPfjEALq6SMO"},"source":["また，インデックスに負の値を指定すると，末尾からの位置になります。インデックス `-1` で最後の要素を参照できます。"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"JVeNKSj76Z5O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551294932,"user_tz":-540,"elapsed":398,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"674f0338-30b4-4b9a-a18c-9cc021a3823b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":15}],"source":["# 末尾の要素にアクセス\n","numbers[-1]"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"N-ALr-5L6dNu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551295240,"user_tz":-540,"elapsed":4,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"91a86e7d-dafd-460a-b1f0-9f47891e20b3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["100"]},"metadata":{},"execution_count":16}],"source":["# 末尾から3番目の要素にアクセス\n","numbers[-3]"]},{"cell_type":"markdown","metadata":{"id":"EvafDsbmcgdG"},"source":["存在しないインデックスを参照しようとするとエラーになります。"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"975mMpPdcj2z","colab":{"base_uri":"https://localhost:8080/","height":159},"executionInfo":{"status":"error","timestamp":1723551302188,"user_tz":-540,"elapsed":424,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"5eb8ccb7-7f3b-48ed-86c8-e597183b7ebb"},"outputs":[{"output_type":"error","ename":"IndexError","evalue":"list index out of range","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-014489fc8b66>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 存在しないキーを参照する\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnumbers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}],"source":["# 存在しないキーを参照する\n","numbers[20]"]},{"cell_type":"markdown","metadata":{"id":"229WEQ_-8PbZ"},"source":["### スライス\n","\n","次に，リストから一度に複数の要素を取り出す操作である **スライス (Slice)** を紹介します。 `開始位置:終了位置` のようにコロン `:` を用いてインデックスを範囲指定して，複数の部分要素にアクセスします。このスライスの処理も多用するため，よく覚えておきましょう。\n","\n","たとえば，先頭から2つの要素を取り出したい場合は，このように指定します。"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"WLbg4GYe8ELT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551313235,"user_tz":-540,"elapsed":458,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"56509675-9cf4-4189-ee76-6623396292ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 100]"]},"metadata":{},"execution_count":18}],"source":["numbers[0:2]"]},{"cell_type":"markdown","metadata":{"id":"WDwENXpWPr0G"},"source":["`開始位置:終了位置` と指定することで，開始位置から **終了位置のひとつ手前** までの要素を抽出します。終了位置に指定したインデックスの値は含まれないことに注意しましょう。\n","\n","また，指定する開始インデックスが `0` の場合，こうして省略することもできます。"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"1-u1Zj_MPpLp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551326928,"user_tz":-540,"elapsed":393,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"46689b60-7b92-469c-8f65-e613fecb412c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 100]"]},"metadata":{},"execution_count":19}],"source":["numbers[:2]"]},{"cell_type":"markdown","metadata":{"id":"Xx4ujL_WQBwB"},"source":["このような記法を使う場合は，終了位置を示すインデックスを **取り出したい要素の個数** ととらえて **先頭から2つ取り出す** 操作と考えるとわかりやすくなります。\n","\n","同じように，ある位置からリストの末尾までを取り出す場合も，終了位置のインデックスを省略できます。"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"A7368vFyP9fo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551352157,"user_tz":-540,"elapsed":426,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"23aab7fb-6173-4c85-b808-56e2b9bca3fa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[4, 5]"]},"metadata":{},"execution_count":20}],"source":["numbers[2:]"]},{"cell_type":"markdown","metadata":{"id":"3ulpCqOiQUJX"},"source":["この場合は，取り出される要素の個数は `len(numbers) - 1` 個になることに気づいたでしょうか。\n","\n","以上より `numbers[2:]` と `numbers[:2]` は，ちょうど2つ目の要素を境界に `numbers` の要素を2分割した前半部分と後半部分になっています。ここで **インデックスが2の要素自体は後半部分に含まれる** ことに注意が必要です。少しややこしくなってきましたがいったん「こういうものだ」と読み飛ばしても大丈夫です。\n","\n","また，開始位置も終了位置も省略した場合は，すべての要素が選択されます。"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"HlfvSL9CQSk-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551400766,"user_tz":-540,"elapsed":328,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"950c273d-c17c-43d1-d12b-b38d0ecd9250"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 100, 4, 5]"]},"metadata":{},"execution_count":21}],"source":["numbers[:]"]},{"cell_type":"markdown","metadata":{"id":"YsOWoOg5RYLF"},"source":["現状では `numbers[:]` と `numbers` の結果は同じです。そのためこれをどう使うのか疑問に感じる方もいることでしょう。しかしこれ以降の章では [NumPy](https://numpy.org/) というライブラリを用いて，リストの中にリストが入ったような **多次元配列 (Multidimentional Array)** を扱うこともあります。多次元配列を用いて **行列 (Matrix)** を表す場合には `0番目のすべての値` を抽出するために `[:, 0]` のような記法を用いる場合もあります。\n","\n","これはPython標準の機能ではありませんが，Pythonの記法を拡張したものになっています。\n","\n","### 複数の型が混在したリスト\n","\n","リストは数値以外にも，ほぼすべての型を扱うことができます。また複数の型を同一のリスト内に混在させることもできます。"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"9XwYnkCHRVCt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551531479,"user_tz":-540,"elapsed":420,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"e15082c1-880d-4b22-cf15-fdae3cd2acd8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Happy', 'Party']"]},"metadata":{},"execution_count":22}],"source":["# 文字列を格納したリスト\n","array = ['Happy', 'Party']\n","array"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"ocJrq7cbTnDs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551531820,"user_tz":-540,"elapsed":6,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"2cfd9f34-c6c0-4125-88e9-99229c8aad16"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 3.14, 'Circle']"]},"metadata":{},"execution_count":23}],"source":["# 複数の型が混在したリスト\n","array = [0, 3.14, 'Circle']\n","array"]},{"cell_type":"markdown","metadata":{"id":"-MQ-VYePTydu"},"source":["リストにリストを代入することもできます。またPython標準のリストでは，リストの中のリスト (入れ子と呼びます) の要素数がバラバラでも問題ありません。"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"buJ6GUiPTs41","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551541189,"user_tz":-540,"elapsed":334,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"b80e83e9-4cdf-43be-c178-1ff30feb8eab"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['Happy', 'Party'], [0, 3.14, 'Circle']]"]},"metadata":{},"execution_count":24}],"source":["# 入れ子のリスト\n","array = [['Happy', 'Party'], [0, 3.14, 'Circle']]\n","array"]},{"cell_type":"markdown","metadata":{"id":"ksn9xbhSUNoB"},"source":["### リストへの値の追加\n","\n","リストを使う際に頻出の操作として **リストへの値の追加** があります。リスト型には `append()` というメソッドがあり，これを用いてリストの末尾に新たな値を追加できます。\n","\n","上記の `array` に値を追加してみましょう。"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"x14rJO_vUeRx","executionInfo":{"status":"ok","timestamp":1723551549917,"user_tz":-540,"elapsed":393,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}}},"outputs":[],"source":["# リスト末尾への値の追加\n","array.append(2.718)"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"3KmOCZmBUjSR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551550296,"user_tz":-540,"elapsed":6,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"16c1d1ae-182c-4fee-8ddb-667068e038b6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['Happy', 'Party'], [0, 3.14, 'Circle'], 2.718]"]},"metadata":{},"execution_count":26}],"source":["# 値の確認\n","array"]},{"cell_type":"markdown","metadata":{"id":"P-g9tziPUp5r"},"source":["また，非常によく使う処理として **空のリストを定義** して，そこに途中の処理でどんどん新たな要素を追加していくやり方があります。"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"2-n_AS0kU-jV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551595506,"user_tz":-540,"elapsed":343,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"dbe48d2c-efe9-42c6-9071-4c0e2c5b86e1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Tech', 'Train']"]},"metadata":{},"execution_count":27}],"source":["# 空のリストを定義\n","array = []\n","\n","# 要素を追加\n","array.append(\"Tech\")\n","array.append(\"Train\")\n","\n","array"]},{"cell_type":"markdown","metadata":{"id":"8WDG7DlZVQKM"},"source":["## タプル\n","\n","**タプル (tuple)** はリストと同様に複数の要素をまとめた型です。しかしリストと異なり **定義したあとに中の要素を変更できない** 性質を持ちます。\n","\n","タプルの定義には `()` を用います。リストほどよく出てくるわけではないですが通常のカッコと同様のため，少し注意しましょう。"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"3YWUGR7xVodz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551611355,"user_tz":-540,"elapsed":340,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"fcfcc6e1-0899-407f-da30-7d6515dfc813"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5, 6, 7, 8, 9)"]},"metadata":{},"execution_count":28}],"source":["# タプルの定義\n","tup = (5, 6, 7, 8, 9)\n","tup"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"gdp2zUZjVvaL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551613306,"user_tz":-540,"elapsed":444,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"832450e7-b50e-49fa-d680-ae74da845924"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["tuple"]},"metadata":{},"execution_count":29}],"source":["# 型の確認\n","type(tup)"]},{"cell_type":"markdown","metadata":{"id":"nQ3N2NkjV0tT"},"source":["タプルを定義する際には `()` を使いましたが，タプルの要素へのアクセスは `[]` を使います。インデックスの仕様に関してはリストと同様です。"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"qrYGqtDFWCZ4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551619859,"user_tz":-540,"elapsed":438,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"32bd150d-31b4-4554-af4d-d144356b515a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":30}],"source":["# 先頭の要素へアクセス\n","tup[0]"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"XrR40yl4Vx1q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551620198,"user_tz":-540,"elapsed":6,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"caac4fc2-a6c4-43e0-dfcd-d062d72c01ba"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7, 8, 9)"]},"metadata":{},"execution_count":31}],"source":["# リストと同様にスライスも使用可能\n","tup[2:]"]},{"cell_type":"markdown","metadata":{"id":"5JOgzGh7WMOi"},"source":["先にも書いたとおり，タプルは各要素の値を変更できません。この性質は定数や設定値など，プログラムの途中で値が書き換わってほしくないものを扱うのに便利です。\n","\n","タプルを書き換えようとするとエラーが発生することを確認しましょう。"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"X4DcbsXyWKFS","colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"status":"error","timestamp":1723551625769,"user_tz":-540,"elapsed":322,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"67a8bbee-11ff-41e5-f87b-b8413f79ba4a"},"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'tuple' object does not support item assignment","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-40003038a4b6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtup\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}],"source":["tup[2] = 3"]},{"cell_type":"markdown","metadata":{"id":"lRYRVP2DWkeZ"},"source":["> 'tuple' object does not support item assignment\n","\n","とは「\"タプル\" は値の代入をサポートしていません」という意味です。\n","\n","`tuple` のように中身が変更できない性質のことを **イミュータブル (Immutable)** と呼び，反対に `list` のように中身が変更できる性質のことを **ミュータブル (Mutable)** であるといいます。"]},{"cell_type":"markdown","metadata":{"id":"khALbtKDW8mM"},"source":["## 辞書\n","\n","リストやタプルでは，複数の値をまとめて扱いました。そこで，定期テストの結果を科目ごとにまとめることを考えます。\n","\n","たとえば，数学90点，国語80点，英語75点というテスト結果を `scores = [90, 80, 75]` と表すことを考えます。しかしこれでは **何番目がどの教科の点数に対応するか** 少しわかりにくいですよね。\n","\n","これに対してPythonの `dict` 型は **キー (key)** と対応する **値 (value)** を対にして格納します。こういった「どの値がなにを格納しているのか」示すときに便利です。\n","\n","リストやタプルでは，各要素にアクセスするときには整数のインデックスを用いていました。それに対して辞書ではキーでインデックス化されているため，整数や文字列など，ほぼすべての型を使って要素を指定することができます。\n","\n","辞書は `{}` を使って定義し，要素にアクセスする際には，リストやタプルと同様に `[ ]` を使用し `[key]` のようにキーを指定して対応する値を取り出します。"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"5oIjSvE1WfVo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551720252,"user_tz":-540,"elapsed":386,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"3aeb8e98-2ec7-4394-8cc7-d6af0bc960ae"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Math': 90, 'Japanese': 80, 'English': 75}"]},"metadata":{},"execution_count":33}],"source":["# 辞書を定義\n","scores = {'Math': 90, 'Japanese': 80, 'English': 75 }\n","scores"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"UKAFYVyoj_mO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551720640,"user_tz":-540,"elapsed":8,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"3528d053-64aa-4093-ee8e-727e07542d7c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["90"]},"metadata":{},"execution_count":34}],"source":["# Key が 'Math' の value にアクセス\n","scores['Math']"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"ZNzqnl-ikGdW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551724286,"user_tz":-540,"elapsed":445,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"cccdfc7b-85b8-47c7-b15e-2737ff240877"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'数学': 90, '国語': 80, '英語': 75}"]},"metadata":{},"execution_count":35}],"source":["# Key に日本語も使用できる\n","scores = {'数学': 90, '国語': 80, '英語': 75 }\n","scores"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"39hsQRI9kP1d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551724788,"user_tz":-540,"elapsed":6,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"9cd11001-b49d-469c-ab7b-1f1b698bb75b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["90"]},"metadata":{},"execution_count":36}],"source":["scores['数学']"]},{"cell_type":"markdown","metadata":{"id":"Zf9WdxDRkXTU"},"source":["他の人が定義した辞書に **どのようなキーが存在するのか** を調べたいときがあります。辞書にはそのような場合に使える便利なメソッドがあります。\n","\n","- `keys()` : キーのリストを返す。 `dict_keys` というリストに似た型が返る。\n","- `values()` : 値のリストを返す。 `dict_values` というリストに似た型が返る\n","- `items()` : 各要素の `(key, value)` のタプルが並んだリストが返る。`dict_items` というリストに似た型が返る"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"XGhNZYXjkTY2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551765614,"user_tz":-540,"elapsed":324,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"8f020e2b-b7c8-46d7-936a-c0baee59247b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['数学', '国語', '英語'])"]},"metadata":{},"execution_count":37}],"source":["# key のリスト\n","scores.keys()"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"N_UUa_X6k-Ui","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551775119,"user_tz":-540,"elapsed":407,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"ab8aa042-0d56-4284-bb8a-03c2886c17a8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_values([90, 80, 75])"]},"metadata":{},"execution_count":38}],"source":["# 値のリスト\n","scores.values()"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"SjvNPTvblAMK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551781115,"user_tz":-540,"elapsed":388,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"710bebbb-343e-48cf-acf2-54a4be361c66"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_items([('数学', 90), ('国語', 80), ('英語', 75)])"]},"metadata":{},"execution_count":39}],"source":["# (key, value) のタプルを要素とするリスト\n","scores.items()"]},{"cell_type":"markdown","metadata":{"id":"l6HSXWs7msek"},"source":["`dict_keys` , `dict_values` , `dict_items` と新しい型が登場しました。これは辞書特有の型であり，厳密にはPython標準のリストとは異なります。しかしここではリストと似た性質の型であるといった程度の理解で問題ありません。\n","\n","辞書に要素を追加する場合は，新しいキーを指定して値を代入します。"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"DPjGD7fjlEf_","executionInfo":{"status":"ok","timestamp":1723551949658,"user_tz":-540,"elapsed":430,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}}},"outputs":[],"source":["scores = {'Math': 90, 'Japanese': 80, 'English': 75 }\n","scores['Science'] = 95"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"3hAOxYAQnHeh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551950018,"user_tz":-540,"elapsed":4,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"9b2e8225-f169-4946-e098-5268b972936f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Math': 90, 'Japanese': 80, 'English': 75, 'Science': 95}"]},"metadata":{},"execution_count":41}],"source":["scores"]},{"cell_type":"markdown","metadata":{"id":"p3ckqeYSnSRL"},"source":["すでに存在するキーを指定した場合には，値が上書きされます。"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"t5S_f8DTnKqd","executionInfo":{"status":"ok","timestamp":1723551954553,"user_tz":-540,"elapsed":380,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}}},"outputs":[],"source":["scores['Math'] = 85"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"TcN2HVLanPtY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723551955036,"user_tz":-540,"elapsed":7,"user":{"displayName":"藤原大喜","userId":"17987110239979405001"}},"outputId":"2a716e38-df13-4084-9e0f-21523bdaafae"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Math': 85, 'Japanese': 80, 'English': 75, 'Science': 95}"]},"metadata":{},"execution_count":43}],"source":["scores"]},{"cell_type":"markdown","metadata":{"id":"34J1MgL1nzKe"},"source":["# 確認テスト\n","\n","# Station2\n","\n","- `a = [1, 9, 8, 4, 2]` というリストに対して以下の操作を行うコードを書いてください。Stationで説明していないメソッドを使うかもしれません。[リスト型についてもう少し](https://docs.python.org/ja/3/tutorial/datastructures.html#more-on-lists) がいいヒントになります。\n","  \n","  (1) リスト a の長さを返してください。\n","\n","  (2) リスト a の先頭の要素を取り除いて `[9, 8, 4, 2]`  としてください。\n","\n","  (3) リスト a の末尾の要素を取り除いて `[1, 9, 8, 4]` としてください。\n","\n","  (4) リスト a の末尾に 100 という値を追加して、`[1, 9, 8, 4, 2, 100]` としてください。\n","\n","- `result = {'Math': 90, 'English': 80, 'Science': 85}` という辞書に対して以下の操作を行うコードを書いてください。\n","\n","  (1) 数学 (Math) の点数を80点に変更してください。\n","  \n","  (2) 国語 (Japanese) の点数は75点でした。追加してください。\n","  \n","  (3) 科目名だけを取り出してください。\n","  \n","  (4) 点数だけを取り出してください。\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HC64vFbSd9cu"},"outputs":[],"source":["a = [1, 9, 8, 4, 2]\n","\n","# (1) リスト a の長さを返してください。\n","print(len(a))\n","# (2) リスト a の先頭の要素を取り除いて [9, 8, 4, 2] としてください。\n","a.pop(0)\n","# (3) リスト a の末尾の要素を取り除いて [1, 9, 8, 4] としてください。\n","a.pop()\n","# (4) リスト a の末尾に 100 という値を追加して、[1, 9, 8, 4, 2, 100] としてください。\n","a.append(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0_L3sZr4ejhN"},"outputs":[],"source":["result = {'Math': 90, 'English': 80, 'Science': 85}\n","\n","# (1) 数学 (Math) の点数を80点に変更してください。\n","result['Math'] = 80\n","# (2) 国語 (Japanese) の点数は75点でした。追加してください。\n","result['Japanese'] = 75\n","# (3) 科目名だけを取り出してください。\n","result.keys()\n","# (4) 点数だけを取り出してください。\n","result.values()"]}],"metadata":{"colab":{"provenance":[{"file_id":"1GIUWBh4e2itpr9Cba_nJ3qjwFE2rf9wl","timestamp":1723550220491}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}